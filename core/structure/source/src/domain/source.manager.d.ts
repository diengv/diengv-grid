import { AggregateEvent } from '@generic-ui/hermes';
import { ItemEntity } from './item/item.entity';
import { StructureId } from '../../../structure-core/src/api/global/structure.id';
import { FieldEntity } from '../../../field/src/domain/field/field.entity';
import { ItemEntityId } from './item/item.entity-id';
import { FormationManager } from '../../../formation/src/domain/formation.manager';
import { RowSelectToggleType } from '../../../formation/src/domain/row-select-toggle-type';
import { FormationCustomSelectId } from '../../../formation/src/api/custom/formation.custom-select.id';
import { FormationCustomSelectionConfig } from '../../../formation/src/api/custom/formation.custom-selection.config';
import { StructureAggregateEvent } from '../../../structure-core/src/core/structure.aggregate-event';
export declare class SourceManager {
    events: Array<any>;
    private loading;
    private fetched;
    private origin;
    private entities;
    private preparedEntities;
    private slicedEntities;
    private readonly formationManager;
    constructor(formationManager: FormationManager);
    isLoading(): boolean;
    setLoading(enabled: boolean): void;
    setEntities(ent: Array<ItemEntity>): void;
    getEntities(): Array<ItemEntity>;
    setPreparedEntities(): void;
    getPreparedEntities(): Array<ItemEntity>;
    setSlicedEntities(ent: Array<ItemEntity>): void;
    getSlicedEntities(): Array<ItemEntity>;
    setOrigin(items: Array<any>, structureId: StructureId): AggregateEvent<StructureId>;
    setConvertedOrigin(items: Array<ItemEntity>, structureId: StructureId): AggregateEvent<StructureId>;
    getOrigin(): Array<ItemEntity>;
    editOriginItem(itemId: string, value: any, field: FieldEntity, structureId: StructureId): ReadonlyArray<AggregateEvent<StructureId>>;
    deleteAllSelected(structureId: StructureId): Array<AggregateEvent<StructureId>>;
    deleteOriginItem(payload: number | ItemEntityId | Array<number> | Array<ItemEntityId>, structureId: StructureId): Array<AggregateEvent<StructureId>>;
    addOriginItem(item: any, structureId: StructureId): ReadonlyArray<StructureAggregateEvent>;
    setCustomConfig(config: FormationCustomSelectionConfig): Array<StructureAggregateEvent>;
    selectCustom(id: FormationCustomSelectId): void;
    selectAll(): void;
    unselectAll(): void;
    selectByIndex(indexes: Array<number>): void;
    selectByIds(ids: Array<string>): void;
    reSelect(): void;
    setSelectedRows(selectedRows: Array<string>): void;
    toggleRow(itemId: string, type: RowSelectToggleType): void;
    getFormation(): FormationManager;
    private convertItems;
    private createOriginChangedEvent;
    private findOriginItem;
    private findOriginItemIndex;
    private recalculatePositions;
    private deleteOneOriginItem;
    private deleteOriginItemByItemId;
    private deleteOriginItemByIndex;
    private deleteManyOriginItemByIndex;
    private deleteManyOriginItemByItemID;
}
