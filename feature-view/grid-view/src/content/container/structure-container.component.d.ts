import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import { SmartComponent } from '../../../../../feature/common/src/cdk/component/lib/src/smart-component';
import { SchemaRowColoring } from '../../../../../core/schema/src/api/row-coloring/schema-row-coloring';
import { StructureId } from '../../../../../core/structure/structure-core/src/api/global/structure.id';
import { StructurePublisher } from '../../../../../core/structure/structure-core/src/api/structure.publisher';
import { StructureWarehouse } from '../../../../../core/structure/structure-core/src/api/structure.warehouse';
import { SourceWarehouse } from '../../../../../core/structure/source/src/api/source.warehouse';
import { CompositionPublisher } from '../../../../../core/composition/src/api/composition.publisher';
import { CompositionWarehouse } from '../../../../../core/composition/src/api/composition.warehouse';
import { FormationWarehouse } from '../../../../../core/structure/formation/src/api/formation.warehouse';
import { Item } from '../../../../../core/structure/source/src/api/item/item';
import { VerticalFormationWarehouse } from '../../../../../core/structure/vertical-formation/src/api/vertical-formation.warehouse';
import { StructureInitialValuesReadyArchive } from '../../../../../core/structure/structure-core/src/api/ready/structure.initial-values-ready.archive';
import { ResizeDetector } from '../../../../../feature/common/src/cdk/resize-detector/resize.detector';
import { CompositionId } from '../../../../../core/composition/src/api/global/composition.id';
import { CompositionAccessorModel } from '../../../../../feature/composition/src/column/composition.accessor.model';
import { CompositionTemplateWarehouse } from '../../../../../feature/composition/src/column/composition.template-warehouse';
import * as i0 from "@angular/core";
export declare class StructureContainerComponent extends SmartComponent implements OnInit, AfterViewInit, OnDestroy {
    private readonly elRef;
    private readonly ngZone;
    private readonly structureId;
    private readonly compositionId;
    private readonly structureCommandService;
    private readonly structureWarehouse;
    private readonly verticalFormationWarehouse;
    private readonly sourceWarehouse;
    private readonly compositionCommandInvoker;
    private readonly compositionWarehouse;
    private readonly compositionTemplateWarehouse;
    private readonly formationWarehouse;
    private readonly resizeDetector;
    private readonly structureInitialValuesReadyArchive;
    private readonly structureParent;
    readonly sourceCollectionRef?: ElementRef;
    columns: Array<CompositionAccessorModel>;
    source: Array<Item>;
    height: number;
    rowColoring: SchemaRowColoring;
    private autoResizeWidthEnabled;
    private scrollObservation$;
    private readonly styleModifier;
    constructor(changeDetectorRef: ChangeDetectorRef, elRef: ElementRef, ngZone: NgZone, structureId: StructureId, compositionId: CompositionId, structureCommandService: StructurePublisher, structureWarehouse: StructureWarehouse, verticalFormationWarehouse: VerticalFormationWarehouse, sourceWarehouse: SourceWarehouse, compositionCommandInvoker: CompositionPublisher, compositionWarehouse: CompositionWarehouse, compositionTemplateWarehouse: CompositionTemplateWarehouse, formationWarehouse: FormationWarehouse, resizeDetector: ResizeDetector, structureInitialValuesReadyArchive: StructureInitialValuesReadyArchive, structureParent: any);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    protected getSelectorName(): string;
    private setContainerHeight;
    private setSourceHeight;
    private recalculateContainer;
    private enableScrollObservation;
    private disableScrollObservation;
    static ɵfac: i0.ɵɵFactoryDeclaration<StructureContainerComponent, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StructureContainerComponent, "div[gui-structure-container]", never, {}, {}, never, never, false, never>;
}
