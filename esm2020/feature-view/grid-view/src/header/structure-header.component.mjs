import { ChangeDetectionStrategy, Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { SmartComponent } from '../../../../feature/common/src/cdk/component/lib/src/smart-component';
import { StructureHeaderColumnsComponent } from './column/structure-header-columns.component';
import { StructureHeaderFiltersComponent } from './filters/structure-header-filters.component';
import { RowSelectionType } from '../../../../core/structure/formation/src/api/row-selected/row-selection';
import { StyleModifier } from '../../../../feature/common/src/cdk/component/lib/src/dom/style/style-modifier';
import * as i0 from "@angular/core";
import * as i1 from "../../../../core/structure/structure-core/src/api/global/structure.id";
import * as i2 from "../../../../core/composition/src/api/global/composition.id";
import * as i3 from "../../../../core/structure/filter/src/api/filter.warehouse";
import * as i4 from "../../../../core/structure/structure-core/src/api/structure.warehouse";
import * as i5 from "../../../../core/structure/formation/src/api/formation.warehouse";
import * as i6 from "../../../../core/structure/vertical-formation/src/api/vertical-formation.warehouse";
import * as i7 from "../../../../feature/composition/src/column/composition.template-warehouse";
import * as i8 from "../../../../core/composition/src/api/composition.warehouse";
import * as i9 from "@angular/common";
import * as i10 from "./column/structure-header-columns.component";
import * as i11 from "./group/structure-header-groups.component";
import * as i12 from "./filters/structure-header-filters.component";
export class StructureHeaderComponent extends SmartComponent {
    constructor(changeDetectorRef, elementRef, structureId, compositionId, filterWarehouse, structureWarehouse, formationWarehouse, structureVerticalFormationWarehouse, compositionTemplateWarehouse, compositionWarehouse) {
        super(changeDetectorRef, elementRef);
        this.changeDetectorRef = changeDetectorRef;
        this.structureId = structureId;
        this.compositionId = compositionId;
        this.filterWarehouse = filterWarehouse;
        this.structureWarehouse = structureWarehouse;
        this.formationWarehouse = formationWarehouse;
        this.structureVerticalFormationWarehouse = structureVerticalFormationWarehouse;
        this.compositionTemplateWarehouse = compositionTemplateWarehouse;
        this.compositionWarehouse = compositionWarehouse;
        this.headerColumns = [];
        this.filterRowEnabled = false;
        this.showGroups = false;
        this.styleModifier = new StyleModifier(elementRef.nativeElement);
    }
    ngOnInit() {
        this.subscribe(this.formationWarehouse.onType(this.structureId), (type) => {
            this.showSelection = type === RowSelectionType.CHECKBOX || type === RowSelectionType.RADIO;
        });
        this.subscribe(this.compositionTemplateWarehouse.onHeaderCols(this.compositionId), (columns) => {
            this.headerColumns = columns;
        });
        this.subscribeWithoutRender(this.compositionWarehouse.onContainerWidth(this.compositionId), (width) => {
            this.styleModifier.getElement(this.containerRef.nativeElement).setWidth(width);
        });
        this.subscribe(this.filterWarehouse.onFilteringEnabled(this.structureId), (enabled) => {
            this.filterRowEnabled = enabled;
        });
        this.subscribe(this.compositionWarehouse.onGroups(this.compositionId), (collection) => {
            this.showGroups = collection.isVisible();
            this.groups = collection.getGroups();
        });
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.subscribeWithoutRender(this.structureVerticalFormationWarehouse.onRowHeight(this.structureId), (rowHeight) => {
            const headerHeight = +(rowHeight) + 2;
            if (this.filtersRef) {
                this.styleModifier.getElement(this.filtersRef.nativeElement).setHeight(headerHeight);
            }
        });
    }
    getSelectorName() {
        return 'gui-structure-header';
    }
}
StructureHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: StructureHeaderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.StructureId }, { token: i2.CompositionId }, { token: i3.FilterWarehouse }, { token: i4.StructureWarehouse }, { token: i5.FormationWarehouse }, { token: i6.VerticalFormationWarehouse }, { token: i7.CompositionTemplateWarehouse }, { token: i8.CompositionWarehouse }], target: i0.ɵɵFactoryTarget.Component });
StructureHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: StructureHeaderComponent, selector: "div[gui-structure-header]", viewQueries: [{ propertyName: "containerRef", first: true, predicate: StructureHeaderColumnsComponent, descendants: true, read: ElementRef, static: true }, { propertyName: "filtersRef", first: true, predicate: StructureHeaderFiltersComponent, descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div *ngIf=\"showGroups\"\n\t [checkboxSelection]=\"showSelection\"\n\t [groups]=\"groups\"\n\t class=\"gui-header\"\n\t gui-structure-header-groups>\n</div>\n\n<div [columns]=\"headerColumns\"\n\t [showSelection]=\"showSelection\"\n\t class=\"gui-header\"\n\t gui-structure-header-columns>\n</div>\n\n<div *ngIf=\"filterRowEnabled\"\n\t [columns]=\"headerColumns\"\n\t class=\"gui-header\"\n\t gui-structure-header-filters>\n</div>\n", dependencies: [{ kind: "directive", type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i10.StructureHeaderColumnsComponent, selector: "div[gui-structure-header-columns][columns]", inputs: ["columns", "showSelection"] }, { kind: "component", type: i11.StructureHeaderGroupsComponent, selector: "div[gui-structure-header-groups][groups][checkboxSelection]", inputs: ["groups", "showGroups", "checkboxSelection"] }, { kind: "component", type: i12.StructureHeaderFiltersComponent, selector: "div[gui-structure-header-filters][columns]", inputs: ["columns"], outputs: ["closed"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: StructureHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[gui-structure-header]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<div *ngIf=\"showGroups\"\n\t [checkboxSelection]=\"showSelection\"\n\t [groups]=\"groups\"\n\t class=\"gui-header\"\n\t gui-structure-header-groups>\n</div>\n\n<div [columns]=\"headerColumns\"\n\t [showSelection]=\"showSelection\"\n\t class=\"gui-header\"\n\t gui-structure-header-columns>\n</div>\n\n<div *ngIf=\"filterRowEnabled\"\n\t [columns]=\"headerColumns\"\n\t class=\"gui-header\"\n\t gui-structure-header-filters>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.StructureId }, { type: i2.CompositionId }, { type: i3.FilterWarehouse }, { type: i4.StructureWarehouse }, { type: i5.FormationWarehouse }, { type: i6.VerticalFormationWarehouse }, { type: i7.CompositionTemplateWarehouse }, { type: i8.CompositionWarehouse }]; }, propDecorators: { containerRef: [{
                type: ViewChild,
                args: [StructureHeaderColumnsComponent, { read: ElementRef, static: true }]
            }], filtersRef: [{
                type: ViewChild,
                args: [StructureHeaderFiltersComponent, { read: ElementRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,