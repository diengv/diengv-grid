import { DomainInitializer } from '@generic-ui/hermes';
import { InMemorySchemaAggregateRepository } from '../persist/in-memory.schema.aggregate-repository';
import { SchemaDomainModule } from '../core/schema.domain-module';
import { SchemaDispatcher } from '../core/schema.dispatcher';
import { SchemaAggregateRepository } from '../core/schema.aggregate-repository';
import { InMemorySchemaAggregateStore } from '../persist/in-memory.schema.aggregate-store';
import { InMemorySchemaStore } from '../persist/in-memory.schema.store';
import { SchemaPublisher } from './schema.publisher';
import { SchemaWarehouse } from './schema.warehouse';
import { SchemaEventRepository } from './schema.event-repository';
import { SchemaCssClassesRepository } from '../core-read/css-classes/schema.css-classes.repository';
import { SchemaDomainPublisher } from '../core/schema.domain-publisher';
import { SchemaDomainWarehouse } from '../core-read/schema.domain-warehouse';
import { SchemaDomainEventRepository } from '../core/schema.domain-event-repository';
export class SchemaApiModule {
    registerProviders(container) {
        container.provide(SchemaDispatcher);
        container.provide(SchemaAggregateRepository, InMemorySchemaAggregateRepository);
        container.provide(InMemorySchemaAggregateStore);
        container.provide(InMemorySchemaStore);
        container.provide(SchemaPublisher, SchemaDomainPublisher);
        container.provide(SchemaWarehouse, SchemaDomainWarehouse);
        container.provide(SchemaEventRepository, SchemaDomainEventRepository);
        container.provide(SchemaCssClassesRepository);
    }
}
export const initSchema = () => {
    new DomainInitializer(new SchemaApiModule(), new SchemaDomainModule()).init();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmFwaS1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc2NoZW1hL3NyYy9hcGkvc2NoZW1hLmFwaS1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEyQixpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3JHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzdELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDcEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDN0UsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFHckYsTUFBTSxPQUFPLGVBQWU7SUFFM0IsaUJBQWlCLENBQUMsU0FBb0I7UUFDckMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BDLFNBQVMsQ0FBQyxPQUFPLENBQUMseUJBQXlCLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztRQUNoRixTQUFTLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDaEQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDMUQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUMxRCxTQUFTLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLDJCQUEyQixDQUFDLENBQUM7UUFDdEUsU0FBUyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FDRDtBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDOUIsSUFBSSxpQkFBaUIsQ0FDcEIsSUFBSSxlQUFlLEVBQUUsRUFDckIsSUFBSSxrQkFBa0IsRUFBRSxDQUN4QixDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpUHJvdmlkZXJzLCBDb250YWluZXIsIERvbWFpbkluaXRpYWxpemVyIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcbmltcG9ydCB7IEluTWVtb3J5U2NoZW1hQWdncmVnYXRlUmVwb3NpdG9yeSB9IGZyb20gJy4uL3BlcnNpc3QvaW4tbWVtb3J5LnNjaGVtYS5hZ2dyZWdhdGUtcmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBTY2hlbWFEb21haW5Nb2R1bGUgfSBmcm9tICcuLi9jb3JlL3NjaGVtYS5kb21haW4tbW9kdWxlJztcbmltcG9ydCB7IFNjaGVtYURpc3BhdGNoZXIgfSBmcm9tICcuLi9jb3JlL3NjaGVtYS5kaXNwYXRjaGVyJztcbmltcG9ydCB7IFNjaGVtYUFnZ3JlZ2F0ZVJlcG9zaXRvcnkgfSBmcm9tICcuLi9jb3JlL3NjaGVtYS5hZ2dyZWdhdGUtcmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBJbk1lbW9yeVNjaGVtYUFnZ3JlZ2F0ZVN0b3JlIH0gZnJvbSAnLi4vcGVyc2lzdC9pbi1tZW1vcnkuc2NoZW1hLmFnZ3JlZ2F0ZS1zdG9yZSc7XG5pbXBvcnQgeyBJbk1lbW9yeVNjaGVtYVN0b3JlIH0gZnJvbSAnLi4vcGVyc2lzdC9pbi1tZW1vcnkuc2NoZW1hLnN0b3JlJztcbmltcG9ydCB7IFNjaGVtYVB1Ymxpc2hlciB9IGZyb20gJy4vc2NoZW1hLnB1Ymxpc2hlcic7XG5pbXBvcnQgeyBTY2hlbWFXYXJlaG91c2UgfSBmcm9tICcuL3NjaGVtYS53YXJlaG91c2UnO1xuaW1wb3J0IHsgU2NoZW1hRXZlbnRSZXBvc2l0b3J5IH0gZnJvbSAnLi9zY2hlbWEuZXZlbnQtcmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBTY2hlbWFDc3NDbGFzc2VzUmVwb3NpdG9yeSB9IGZyb20gJy4uL2NvcmUtcmVhZC9jc3MtY2xhc3Nlcy9zY2hlbWEuY3NzLWNsYXNzZXMucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBTY2hlbWFEb21haW5QdWJsaXNoZXIgfSBmcm9tICcuLi9jb3JlL3NjaGVtYS5kb21haW4tcHVibGlzaGVyJztcbmltcG9ydCB7IFNjaGVtYURvbWFpbldhcmVob3VzZSB9IGZyb20gJy4uL2NvcmUtcmVhZC9zY2hlbWEuZG9tYWluLXdhcmVob3VzZSc7XG5pbXBvcnQgeyBTY2hlbWFEb21haW5FdmVudFJlcG9zaXRvcnkgfSBmcm9tICcuLi9jb3JlL3NjaGVtYS5kb21haW4tZXZlbnQtcmVwb3NpdG9yeSc7XG5cblxuZXhwb3J0IGNsYXNzIFNjaGVtYUFwaU1vZHVsZSBpbXBsZW1lbnRzIEFwaVByb3ZpZGVycyB7XG5cblx0cmVnaXN0ZXJQcm92aWRlcnMoY29udGFpbmVyOiBDb250YWluZXIpOiB2b2lkIHtcblx0XHRjb250YWluZXIucHJvdmlkZShTY2hlbWFEaXNwYXRjaGVyKTtcblx0XHRjb250YWluZXIucHJvdmlkZShTY2hlbWFBZ2dyZWdhdGVSZXBvc2l0b3J5LCBJbk1lbW9yeVNjaGVtYUFnZ3JlZ2F0ZVJlcG9zaXRvcnkpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKEluTWVtb3J5U2NoZW1hQWdncmVnYXRlU3RvcmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKEluTWVtb3J5U2NoZW1hU3RvcmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFNjaGVtYVB1Ymxpc2hlciwgU2NoZW1hRG9tYWluUHVibGlzaGVyKTtcblx0XHRjb250YWluZXIucHJvdmlkZShTY2hlbWFXYXJlaG91c2UsIFNjaGVtYURvbWFpbldhcmVob3VzZSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoU2NoZW1hRXZlbnRSZXBvc2l0b3J5LCBTY2hlbWFEb21haW5FdmVudFJlcG9zaXRvcnkpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFNjaGVtYUNzc0NsYXNzZXNSZXBvc2l0b3J5KTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgaW5pdFNjaGVtYSA9ICgpID0+IHtcblx0bmV3IERvbWFpbkluaXRpYWxpemVyKFxuXHRcdG5ldyBTY2hlbWFBcGlNb2R1bGUoKSxcblx0XHRuZXcgU2NoZW1hRG9tYWluTW9kdWxlKClcblx0KS5pbml0KCk7XG59O1xuIl19