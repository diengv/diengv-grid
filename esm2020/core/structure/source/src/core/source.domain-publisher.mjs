import { zip } from 'rxjs';
import { StructureEditSourceItemParams } from './origin/edit/structure.edit-source-item.params';
import { FieldWarehouse } from '../../../field/src/api/field.warehouse';
import { CommandDispatcher, fromRxJsObservable, hermesMap, hermesTake, toRxJsObservable } from '@generic-ui/hermes';
import { DeleteOriginItemCommand } from './origin/delete/delete-origin-item.command';
import { SourceWarehouse } from '../api/source.warehouse';
import { SourcePublisher } from '../api/source.publisher';
import { SourceSetLoadingCommand } from './loading/source-set-loading.command';
import { SetOriginCommand } from './origin/set/set-origin.command';
import { StructureEditSourceItemCommand } from './origin/edit/structure.edit-source-item.command';
export class SourceDomainPublisher extends SourcePublisher {
    constructor(commandDispatcher, fieldWarehouse, sourceReadModelService) {
        super();
        this.commandDispatcher = commandDispatcher;
        this.fieldWarehouse = fieldWarehouse;
        this.sourceReadModelService = sourceReadModelService;
    }
    setOrigin(items, structureId) {
        this.commandDispatcher.dispatch(new SetOriginCommand(structureId, items));
    }
    setLoading(enabled, structureId) {
        this.commandDispatcher.dispatch(new SourceSetLoadingCommand(structureId, enabled));
    }
    editItem(params, structureId) {
        this.commandDispatcher.dispatch(new StructureEditSourceItemCommand(structureId, params));
    }
    editItemByIndex(itemIndex, fieldIndex, value, structureId) {
        const itemId$ = toRxJsObservable(this.sourceReadModelService
            .onceItems(structureId)
            .pipe(hermesMap((entities) => {
            return entities[itemIndex].getId();
        })));
        const fieldId$ = toRxJsObservable(this.fieldWarehouse.onFields(structureId));
        fromRxJsObservable(zip(itemId$, fieldId$))
            .pipe(hermesTake(1))
            .subscribe((array) => {
            const itemId = array[0], fields = array[1];
            this.editItem(new StructureEditSourceItemParams(itemId, fields[fieldIndex], value), structureId);
        });
    }
    deleteRow(row, structureId) {
        if (row.getItemId() !== undefined) {
            this.deleteItemById(row.getItemId(), structureId);
        }
        else if (row.getIndex() !== undefined) {
            this.deleteItemByIndex(row.getIndex(), structureId);
        }
    }
    deleteRows(rows, structureId) {
        if (rows.length > 0) {
            if (rows[0].getItemId() !== undefined) {
                this.deleteManyItemsByItemIds(rows.map(r => r.getItemId()), structureId);
            }
            else if (rows[0].getIndex() !== undefined) {
                this.deleteManyItemsByIndex(rows.map(r => r.getIndex()), structureId);
            }
        }
    }
    deleteItemByIndex(index, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byIndex(structureId, index));
    }
    deleteItemById(itemId, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byItemId(structureId, itemId));
    }
    deleteManyItemsByIndex(indexes, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byManyIndex(structureId, indexes));
    }
    deleteManyItemsByItemIds(itemIds, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byManyItemId(structureId, itemIds));
    }
}
SourceDomainPublisher.services = [CommandDispatcher, FieldWarehouse, SourceWarehouse];
//# sourceMappingURL=data:application/json;base64,