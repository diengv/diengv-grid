import { StructureCommand } from '../../../../../structure-core/src/core/structure.command';
export var DeleteCommandPayloadType;
(function (DeleteCommandPayloadType) {
    DeleteCommandPayloadType[DeleteCommandPayloadType["INDEX"] = 0] = "INDEX";
    DeleteCommandPayloadType[DeleteCommandPayloadType["ITEM_ID"] = 1] = "ITEM_ID";
    DeleteCommandPayloadType[DeleteCommandPayloadType["MANY_INDEX"] = 2] = "MANY_INDEX";
    DeleteCommandPayloadType[DeleteCommandPayloadType["MANY_ITEM_ID"] = 3] = "MANY_ITEM_ID";
})(DeleteCommandPayloadType || (DeleteCommandPayloadType = {}));
export class DeleteOriginItemCommand extends StructureCommand {
    constructor(structureId, payload, type) {
        super(structureId, 'DeleteOriginItemCommand');
        this.payload = payload;
        this.type = type;
    }
    static byIndex(structureId, index) {
        return new DeleteOriginItemCommand(structureId, index, DeleteCommandPayloadType.INDEX);
    }
    static byManyIndex(structureId, indexes) {
        return new DeleteOriginItemCommand(structureId, indexes, DeleteCommandPayloadType.MANY_INDEX);
    }
    static byItemId(structureId, itemId) {
        return new DeleteOriginItemCommand(structureId, itemId, DeleteCommandPayloadType.ITEM_ID);
    }
    static byManyItemId(structureId, itemIds) {
        return new DeleteOriginItemCommand(structureId, itemIds, DeleteCommandPayloadType.MANY_ITEM_ID);
    }
    getType() {
        return this.type;
    }
    getPayload() {
        return this.payload;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLW9yaWdpbi1pdGVtLmNvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL3NvdXJjZS9zcmMvY29yZS9vcmlnaW4vZGVsZXRlL2RlbGV0ZS1vcmlnaW4taXRlbS5jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBRTVGLE1BQU0sQ0FBTixJQUFZLHdCQUtYO0FBTEQsV0FBWSx3QkFBd0I7SUFDbkMseUVBQUssQ0FBQTtJQUNMLDZFQUFPLENBQUE7SUFDUCxtRkFBVSxDQUFBO0lBQ1YsdUZBQVksQ0FBQTtBQUNiLENBQUMsRUFMVyx3QkFBd0IsS0FBeEIsd0JBQXdCLFFBS25DO0FBVUQsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGdCQUFnQjtJQUU1RCxZQUFZLFdBQXdCLEVBQ2hCLE9BQW9FLEVBQ3BFLElBQThCO1FBQ2pELEtBQUssQ0FBQyxXQUFXLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUYzQixZQUFPLEdBQVAsT0FBTyxDQUE2RDtRQUNwRSxTQUFJLEdBQUosSUFBSSxDQUEwQjtJQUVsRCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUF3QixFQUFFLEtBQWE7UUFDckQsT0FBTyxJQUFJLHVCQUF1QixDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBd0IsRUFBRSxPQUFzQjtRQUNsRSxPQUFPLElBQUksdUJBQXVCLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUF3QixFQUFFLE1BQW9CO1FBQzdELE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQXdCLEVBQUUsT0FBNEI7UUFDekUsT0FBTyxJQUFJLHVCQUF1QixDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsd0JBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELE9BQU87UUFDTixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVELFVBQVU7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDckIsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RydWN0dXJlSWQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdHJ1Y3R1cmUtY29yZS9zcmMvYXBpL2dsb2JhbC9zdHJ1Y3R1cmUuaWQnO1xuaW1wb3J0IHsgSXRlbUVudGl0eUlkIH0gZnJvbSAnLi4vLi4vLi4vZG9tYWluL2l0ZW0vaXRlbS5lbnRpdHktaWQnO1xuaW1wb3J0IHsgU3RydWN0dXJlQ29tbWFuZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N0cnVjdHVyZS1jb3JlL3NyYy9jb3JlL3N0cnVjdHVyZS5jb21tYW5kJztcblxuZXhwb3J0IGVudW0gRGVsZXRlQ29tbWFuZFBheWxvYWRUeXBlIHtcblx0SU5ERVgsXG5cdElURU1fSUQsXG5cdE1BTllfSU5ERVgsXG5cdE1BTllfSVRFTV9JRFxufVxuXG5leHBvcnQgdHlwZSBEZWxldGVPcmlnaW5JdGVtUGF5bG9hZCA9IHtcblxuXHRpbmRleD86IG51bWJlcjtcblxuXHRpdGVtSWQ/OiBJdGVtRW50aXR5SWQ7XG5cbn07XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZCBleHRlbmRzIFN0cnVjdHVyZUNvbW1hbmQge1xuXG5cdGNvbnN0cnVjdG9yKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBwYXlsb2FkOiBudW1iZXIgfCBJdGVtRW50aXR5SWQgfCBBcnJheTxudW1iZXI+IHwgQXJyYXk8SXRlbUVudGl0eUlkPixcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSB0eXBlOiBEZWxldGVDb21tYW5kUGF5bG9hZFR5cGUpIHtcblx0XHRzdXBlcihzdHJ1Y3R1cmVJZCwgJ0RlbGV0ZU9yaWdpbkl0ZW1Db21tYW5kJyk7XG5cdH1cblxuXHRzdGF0aWMgYnlJbmRleChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQsIGluZGV4OiBudW1iZXIpOiBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZCB7XG5cdFx0cmV0dXJuIG5ldyBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZChzdHJ1Y3R1cmVJZCwgaW5kZXgsIERlbGV0ZUNvbW1hbmRQYXlsb2FkVHlwZS5JTkRFWCk7XG5cdH1cblxuXHRzdGF0aWMgYnlNYW55SW5kZXgoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkLCBpbmRleGVzOiBBcnJheTxudW1iZXI+KTogRGVsZXRlT3JpZ2luSXRlbUNvbW1hbmQge1xuXHRcdHJldHVybiBuZXcgRGVsZXRlT3JpZ2luSXRlbUNvbW1hbmQoc3RydWN0dXJlSWQsIGluZGV4ZXMsIERlbGV0ZUNvbW1hbmRQYXlsb2FkVHlwZS5NQU5ZX0lOREVYKTtcblx0fVxuXG5cdHN0YXRpYyBieUl0ZW1JZChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQsIGl0ZW1JZDogSXRlbUVudGl0eUlkKTogRGVsZXRlT3JpZ2luSXRlbUNvbW1hbmQge1xuXHRcdHJldHVybiBuZXcgRGVsZXRlT3JpZ2luSXRlbUNvbW1hbmQoc3RydWN0dXJlSWQsIGl0ZW1JZCwgRGVsZXRlQ29tbWFuZFBheWxvYWRUeXBlLklURU1fSUQpO1xuXHR9XG5cblx0c3RhdGljIGJ5TWFueUl0ZW1JZChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQsIGl0ZW1JZHM6IEFycmF5PEl0ZW1FbnRpdHlJZD4pOiBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZCB7XG5cdFx0cmV0dXJuIG5ldyBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZChzdHJ1Y3R1cmVJZCwgaXRlbUlkcywgRGVsZXRlQ29tbWFuZFBheWxvYWRUeXBlLk1BTllfSVRFTV9JRCk7XG5cdH1cblxuXHRnZXRUeXBlKCk6IERlbGV0ZUNvbW1hbmRQYXlsb2FkVHlwZSB7XG5cdFx0cmV0dXJuIHRoaXMudHlwZTtcblx0fVxuXG5cdGdldFBheWxvYWQoKTogbnVtYmVyIHwgSXRlbUVudGl0eUlkIHwgQXJyYXk8bnVtYmVyPiB8IEFycmF5PEl0ZW1FbnRpdHlJZD4ge1xuXHRcdHJldHVybiB0aGlzLnBheWxvYWQ7XG5cdH1cblxufVxuIl19