import { CoreContainer, DomainEventBus, hermesFilter, hermesMap, hermesSwitchMap } from '@generic-ui/hermes';
import { PagingWarehouse } from '../api/paging.warehouse';
import { PrevPageEvent } from '../core/prev-page/prev-page.event';
import { NextPageEvent } from '../core/next-page/next-page.event';
import { PageChangedEvent } from '../core/page/page-changed.event';
import { PagesizeChangedEvent } from '../core/change-pagesize/pagesize-changed.event';
import { PagingEventRepository } from '../api/paging.event-repository';
export class PagingDomainEventRepository extends PagingEventRepository {
    constructor(pagingWarehouse) {
        super();
        this.pagingWarehouse = pagingWarehouse;
        this.eventBusToRemove = CoreContainer.resolve(DomainEventBus);
    }
    onPageChange(structureId) {
        return this.eventBusToRemove
            .ofEvents([
            PrevPageEvent,
            NextPageEvent,
            PageChangedEvent
        ])
            .pipe(hermesFilter((event) => event.getAggregateId().toString() === structureId.toAggregateId().toString()), hermesSwitchMap((event) => {
            return this.pagingWarehouse
                .oncePaging(structureId.toAggregateId())
                .pipe(hermesMap((paging) => paging.getPage()));
        }));
    }
    onPageSizeChange(structureId) {
        return this.eventBusToRemove
            .ofEvents([
            PagesizeChangedEvent
        ])
            .pipe(hermesFilter((event) => event.getAggregateId().toString() === structureId.toAggregateId().toString()), hermesSwitchMap((event) => {
            return this.pagingWarehouse
                .oncePaging(structureId.toAggregateId())
                .pipe(hermesMap((paging) => paging.getPageSize()));
        }));
    }
}
PagingDomainEventRepository.services = [PagingWarehouse];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5nLmRvbWFpbi5ldmVudC1yZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL25neC1ncmlkL3NyYy9jb3JlL3N0cnVjdHVyZS9wYWdpbmcvc3JjL2NvcmUtcmVhZC9wYWdpbmcuZG9tYWluLmV2ZW50LXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBZSxjQUFjLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBb0IsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHNUksT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFbkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDdEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHdkUsTUFBTSxPQUFPLDJCQUE0QixTQUFRLHFCQUFxQjtJQUlyRSxZQUE2QixlQUFnQztRQUM1RCxLQUFLLEVBQUUsQ0FBQztRQURvQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFGNUMscUJBQWdCLEdBQW1CLGFBQWEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFJMUYsQ0FBQztJQUlELFlBQVksQ0FBQyxXQUFxQztRQUVqRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0I7YUFDdEIsUUFBUSxDQUFDO1lBQ1IsYUFBb0I7WUFDcEIsYUFBb0I7WUFDcEIsZ0JBQXVCO1NBQ3ZCLENBQ0Q7YUFDQSxJQUFJLENBQ0osWUFBWSxDQUFDLENBQUMsS0FBK0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUMvSCxlQUFlLENBQUMsQ0FBQyxLQUErQixFQUFFLEVBQUU7WUFFbkQsT0FBTyxJQUFJLENBQUMsZUFBZTtpQkFDeEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztpQkFDdkMsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLE1BQW1CLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUNwRCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0YsQ0FBQztJQUNSLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxXQUFxQztRQUVyRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0I7YUFDdEIsUUFBUSxDQUFDO1lBQ1Isb0JBQTJCO1NBQzNCLENBQ0Q7YUFDQSxJQUFJLENBQ0osWUFBWSxDQUFDLENBQUMsS0FBK0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUMvSCxlQUFlLENBQUMsQ0FBQyxLQUErQixFQUFFLEVBQUU7WUFFbkQsT0FBTyxJQUFJLENBQUMsZUFBZTtpQkFDeEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztpQkFDdkMsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLE1BQW1CLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUN4RCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0YsQ0FBQztJQUNSLENBQUM7O0FBMUNlLG9DQUFRLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmVDb250YWluZXIsIERvbWFpbkV2ZW50LCBEb21haW5FdmVudEJ1cywgaGVybWVzRmlsdGVyLCBoZXJtZXNNYXAsIEhlcm1lc09ic2VydmFibGUsIGhlcm1lc1N3aXRjaE1hcCB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVSZWFkTW9kZWxSb290SWQgfSBmcm9tICcuLi8uLi8uLi9zdHJ1Y3R1cmUtY29yZS9zcmMvYXBpL3JlYWQvc3RydWN0dXJlLnJlYWQtbW9kZWwtcm9vdC1pZCc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uL3N0cnVjdHVyZS1jb3JlL3NyYy9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBQYWdpbmdXYXJlaG91c2UgfSBmcm9tICcuLi9hcGkvcGFnaW5nLndhcmVob3VzZSc7XG5pbXBvcnQgeyBQcmV2UGFnZUV2ZW50IH0gZnJvbSAnLi4vY29yZS9wcmV2LXBhZ2UvcHJldi1wYWdlLmV2ZW50JztcbmltcG9ydCB7IE5leHRQYWdlRXZlbnQgfSBmcm9tICcuLi9jb3JlL25leHQtcGFnZS9uZXh0LXBhZ2UuZXZlbnQnO1xuaW1wb3J0IHsgUGFnZUNoYW5nZWRFdmVudCB9IGZyb20gJy4uL2NvcmUvcGFnZS9wYWdlLWNoYW5nZWQuZXZlbnQnO1xuaW1wb3J0IHsgUGFnaW5nTW9kZWwgfSBmcm9tICcuLi9hcGkvbW9kZWwvcGFnaW5nLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VzaXplQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi4vY29yZS9jaGFuZ2UtcGFnZXNpemUvcGFnZXNpemUtY2hhbmdlZC5ldmVudCc7XG5pbXBvcnQgeyBQYWdpbmdFdmVudFJlcG9zaXRvcnkgfSBmcm9tICcuLi9hcGkvcGFnaW5nLmV2ZW50LXJlcG9zaXRvcnknO1xuXG5cbmV4cG9ydCBjbGFzcyBQYWdpbmdEb21haW5FdmVudFJlcG9zaXRvcnkgZXh0ZW5kcyBQYWdpbmdFdmVudFJlcG9zaXRvcnkge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgZXZlbnRCdXNUb1JlbW92ZTogRG9tYWluRXZlbnRCdXMgPSBDb3JlQ29udGFpbmVyLnJlc29sdmUoRG9tYWluRXZlbnRCdXMpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcGFnaW5nV2FyZWhvdXNlOiBQYWdpbmdXYXJlaG91c2UpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0c3RhdGljIHJlYWRvbmx5IHNlcnZpY2VzID0gW1BhZ2luZ1dhcmVob3VzZV07XG5cblx0b25QYWdlQ2hhbmdlKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVSZWFkTW9kZWxSb290SWQpOiBIZXJtZXNPYnNlcnZhYmxlPG51bWJlcj4ge1xuXG5cdFx0cmV0dXJuIHRoaXMuZXZlbnRCdXNUb1JlbW92ZVxuXHRcdFx0XHQgICAub2ZFdmVudHMoW1xuXHRcdFx0XHRcdFx0ICAgUHJldlBhZ2VFdmVudCBhcyBhbnksXG5cdFx0XHRcdFx0XHQgICBOZXh0UGFnZUV2ZW50IGFzIGFueSxcblx0XHRcdFx0XHRcdCAgIFBhZ2VDaGFuZ2VkRXZlbnQgYXMgYW55XG5cdFx0XHRcdFx0ICAgXVxuXHRcdFx0XHQgICApXG5cdFx0XHRcdCAgIC5waXBlKFxuXHRcdFx0XHRcdCAgIGhlcm1lc0ZpbHRlcigoZXZlbnQ6IERvbWFpbkV2ZW50PFN0cnVjdHVyZUlkPikgPT4gZXZlbnQuZ2V0QWdncmVnYXRlSWQoKS50b1N0cmluZygpID09PSBzdHJ1Y3R1cmVJZC50b0FnZ3JlZ2F0ZUlkKCkudG9TdHJpbmcoKSksXG5cdFx0XHRcdFx0ICAgaGVybWVzU3dpdGNoTWFwKChldmVudDogRG9tYWluRXZlbnQ8U3RydWN0dXJlSWQ+KSA9PiB7XG5cblx0XHRcdFx0XHRcdCAgIHJldHVybiB0aGlzLnBhZ2luZ1dhcmVob3VzZVxuXHRcdFx0XHRcdFx0XHRcdFx0ICAub25jZVBhZ2luZyhzdHJ1Y3R1cmVJZC50b0FnZ3JlZ2F0ZUlkKCkpXG5cdFx0XHRcdFx0XHRcdFx0XHQgIC5waXBlKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgIGhlcm1lc01hcCgocGFnaW5nOiBQYWdpbmdNb2RlbCkgPT4gcGFnaW5nLmdldFBhZ2UoKSlcblx0XHRcdFx0XHRcdFx0XHRcdCAgKTtcblx0XHRcdFx0XHQgICB9KVxuXHRcdFx0XHQgICApO1xuXHR9XG5cblx0b25QYWdlU2l6ZUNoYW5nZShzdHJ1Y3R1cmVJZDogU3RydWN0dXJlUmVhZE1vZGVsUm9vdElkKTogSGVybWVzT2JzZXJ2YWJsZTxudW1iZXI+IHtcblxuXHRcdHJldHVybiB0aGlzLmV2ZW50QnVzVG9SZW1vdmVcblx0XHRcdFx0ICAgLm9mRXZlbnRzKFtcblx0XHRcdFx0XHRcdCAgIFBhZ2VzaXplQ2hhbmdlZEV2ZW50IGFzIGFueVxuXHRcdFx0XHRcdCAgIF1cblx0XHRcdFx0ICAgKVxuXHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHQgICBoZXJtZXNGaWx0ZXIoKGV2ZW50OiBEb21haW5FdmVudDxTdHJ1Y3R1cmVJZD4pID0+IGV2ZW50LmdldEFnZ3JlZ2F0ZUlkKCkudG9TdHJpbmcoKSA9PT0gc3RydWN0dXJlSWQudG9BZ2dyZWdhdGVJZCgpLnRvU3RyaW5nKCkpLFxuXHRcdFx0XHRcdCAgIGhlcm1lc1N3aXRjaE1hcCgoZXZlbnQ6IERvbWFpbkV2ZW50PFN0cnVjdHVyZUlkPikgPT4ge1xuXG5cdFx0XHRcdFx0XHQgICByZXR1cm4gdGhpcy5wYWdpbmdXYXJlaG91c2Vcblx0XHRcdFx0XHRcdFx0XHRcdCAgLm9uY2VQYWdpbmcoc3RydWN0dXJlSWQudG9BZ2dyZWdhdGVJZCgpKVxuXHRcdFx0XHRcdFx0XHRcdFx0ICAucGlwZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICBoZXJtZXNNYXAoKHBhZ2luZzogUGFnaW5nTW9kZWwpID0+IHBhZ2luZy5nZXRQYWdlU2l6ZSgpKVxuXHRcdFx0XHRcdFx0XHRcdFx0ICApO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxufVxuIl19