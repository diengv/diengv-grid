import { DomainInitializer } from '@generic-ui/hermes';
import { StructureDomainModule } from '../core/structure.domain-module';
import { InMemoryStructureAggregateStore } from '../persist/domain/in-memory.structure.aggregate-store';
import { InMemoryStructureStore } from '../persist/in-memory.structure.store';
import { StructureAggregateRepository } from '../core/structure-aggregate.repository';
import { InMemoryStructureAggregateRepository } from '../persist/domain/in-memory.structure-aggregate.repository';
import { FabricModalThemeService } from '@generic-ui/fabric';
import { StructureCellEditArchive } from '../../../../../feature-view/grid-view/src/edit/structure.cell-edit.archive';
import { InMemoryStructureReadStore } from '../persist/api/in-memory-structure.read-store';
import { StructureReadModelRepository } from './read/structure.read-model-repository';
import { InMemoryStructureRepository } from '../persist/api/in-memory.structure.repository';
import { StructureAggregateFactory } from '../core/structure.aggregate-factory';
import { StructureReadModelRootConverter } from './read/structure.read-model-root-converter';
import { StructureWarehouse } from './structure.warehouse';
import { StructurePublisher } from './structure.publisher';
import { StructureDomainPublisher } from '../core/structure.domain-publisher';
import { StructureInitialValuesReadyArchive } from './ready/structure.initial-values-ready.archive';
export class StructureApiModule {
    registerProviders(container) {
        container.provide(InMemoryStructureReadStore);
        container.provide(StructureReadModelRepository, InMemoryStructureRepository);
        container.provide(StructureAggregateFactory);
        container.provide(StructureReadModelRootConverter);
        container.provide(StructureWarehouse);
        container.provide(StructurePublisher, StructureDomainPublisher);
        container.provide(StructureInitialValuesReadyArchive);
        container.provide(InMemoryStructureAggregateStore);
        container.provide(InMemoryStructureStore);
        container.provide(StructureAggregateRepository, InMemoryStructureAggregateRepository);
        container.provide(FabricModalThemeService);
        container.provide(StructureCellEditArchive);
    }
}
export function initializeStructure() {
    new DomainInitializer(new StructureApiModule(), new StructureDomainModule()).init();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLmFwaS1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL3N0cnVjdHVyZS1jb3JlL3NyYy9hcGkvc3RydWN0dXJlLmFwaS1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEyQixpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ2xILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRFQUE0RSxDQUFDO0FBQ3RILE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzNGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzVGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBR3BHLE1BQU0sT0FBTyxrQkFBa0I7SUFFOUIsaUJBQWlCLENBQUMsU0FBb0I7UUFFckMsU0FBUyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQzlDLFNBQVMsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUM3RSxTQUFTLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDN0MsU0FBUyxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ELFNBQVMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN0QyxTQUFTLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFDaEUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBRXRELFNBQVMsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuRCxTQUFTLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDMUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ3RGLFNBQVMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUUzQyxTQUFTLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNEO0FBRUQsTUFBTSxVQUFVLG1CQUFtQjtJQUNsQyxJQUFJLGlCQUFpQixDQUFDLElBQUksa0JBQWtCLEVBQUUsRUFBRSxJQUFJLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNyRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpUHJvdmlkZXJzLCBDb250YWluZXIsIERvbWFpbkluaXRpYWxpemVyIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcbmltcG9ydCB7IFN0cnVjdHVyZURvbWFpbk1vZHVsZSB9IGZyb20gJy4uL2NvcmUvc3RydWN0dXJlLmRvbWFpbi1tb2R1bGUnO1xuaW1wb3J0IHsgSW5NZW1vcnlTdHJ1Y3R1cmVBZ2dyZWdhdGVTdG9yZSB9IGZyb20gJy4uL3BlcnNpc3QvZG9tYWluL2luLW1lbW9yeS5zdHJ1Y3R1cmUuYWdncmVnYXRlLXN0b3JlJztcbmltcG9ydCB7IEluTWVtb3J5U3RydWN0dXJlU3RvcmUgfSBmcm9tICcuLi9wZXJzaXN0L2luLW1lbW9yeS5zdHJ1Y3R1cmUuc3RvcmUnO1xuaW1wb3J0IHsgU3RydWN0dXJlQWdncmVnYXRlUmVwb3NpdG9yeSB9IGZyb20gJy4uL2NvcmUvc3RydWN0dXJlLWFnZ3JlZ2F0ZS5yZXBvc2l0b3J5JztcbmltcG9ydCB7IEluTWVtb3J5U3RydWN0dXJlQWdncmVnYXRlUmVwb3NpdG9yeSB9IGZyb20gJy4uL3BlcnNpc3QvZG9tYWluL2luLW1lbW9yeS5zdHJ1Y3R1cmUtYWdncmVnYXRlLnJlcG9zaXRvcnknO1xuaW1wb3J0IHsgRmFicmljTW9kYWxUaGVtZVNlcnZpY2UgfSBmcm9tICdAZ2VuZXJpYy11aS9mYWJyaWMnO1xuaW1wb3J0IHsgU3RydWN0dXJlQ2VsbEVkaXRBcmNoaXZlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS12aWV3L2dyaWQtdmlldy9zcmMvZWRpdC9zdHJ1Y3R1cmUuY2VsbC1lZGl0LmFyY2hpdmUnO1xuaW1wb3J0IHsgSW5NZW1vcnlTdHJ1Y3R1cmVSZWFkU3RvcmUgfSBmcm9tICcuLi9wZXJzaXN0L2FwaS9pbi1tZW1vcnktc3RydWN0dXJlLnJlYWQtc3RvcmUnO1xuaW1wb3J0IHsgU3RydWN0dXJlUmVhZE1vZGVsUmVwb3NpdG9yeSB9IGZyb20gJy4vcmVhZC9zdHJ1Y3R1cmUucmVhZC1tb2RlbC1yZXBvc2l0b3J5JztcbmltcG9ydCB7IEluTWVtb3J5U3RydWN0dXJlUmVwb3NpdG9yeSB9IGZyb20gJy4uL3BlcnNpc3QvYXBpL2luLW1lbW9yeS5zdHJ1Y3R1cmUucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVBZ2dyZWdhdGVGYWN0b3J5IH0gZnJvbSAnLi4vY29yZS9zdHJ1Y3R1cmUuYWdncmVnYXRlLWZhY3RvcnknO1xuaW1wb3J0IHsgU3RydWN0dXJlUmVhZE1vZGVsUm9vdENvbnZlcnRlciB9IGZyb20gJy4vcmVhZC9zdHJ1Y3R1cmUucmVhZC1tb2RlbC1yb290LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVXYXJlaG91c2UgfSBmcm9tICcuL3N0cnVjdHVyZS53YXJlaG91c2UnO1xuaW1wb3J0IHsgU3RydWN0dXJlUHVibGlzaGVyIH0gZnJvbSAnLi9zdHJ1Y3R1cmUucHVibGlzaGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZURvbWFpblB1Ymxpc2hlciB9IGZyb20gJy4uL2NvcmUvc3RydWN0dXJlLmRvbWFpbi1wdWJsaXNoZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlSW5pdGlhbFZhbHVlc1JlYWR5QXJjaGl2ZSB9IGZyb20gJy4vcmVhZHkvc3RydWN0dXJlLmluaXRpYWwtdmFsdWVzLXJlYWR5LmFyY2hpdmUnO1xuXG5cbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVBcGlNb2R1bGUgaW1wbGVtZW50cyBBcGlQcm92aWRlcnMge1xuXG5cdHJlZ2lzdGVyUHJvdmlkZXJzKGNvbnRhaW5lcjogQ29udGFpbmVyKTogdm9pZCB7XG5cblx0XHRjb250YWluZXIucHJvdmlkZShJbk1lbW9yeVN0cnVjdHVyZVJlYWRTdG9yZSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoU3RydWN0dXJlUmVhZE1vZGVsUmVwb3NpdG9yeSwgSW5NZW1vcnlTdHJ1Y3R1cmVSZXBvc2l0b3J5KTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVBZ2dyZWdhdGVGYWN0b3J5KTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVSZWFkTW9kZWxSb290Q29udmVydGVyKTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVXYXJlaG91c2UpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFN0cnVjdHVyZVB1Ymxpc2hlciwgU3RydWN0dXJlRG9tYWluUHVibGlzaGVyKTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVJbml0aWFsVmFsdWVzUmVhZHlBcmNoaXZlKTtcblxuXHRcdGNvbnRhaW5lci5wcm92aWRlKEluTWVtb3J5U3RydWN0dXJlQWdncmVnYXRlU3RvcmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKEluTWVtb3J5U3RydWN0dXJlU3RvcmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFN0cnVjdHVyZUFnZ3JlZ2F0ZVJlcG9zaXRvcnksIEluTWVtb3J5U3RydWN0dXJlQWdncmVnYXRlUmVwb3NpdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoRmFicmljTW9kYWxUaGVtZVNlcnZpY2UpO1xuXG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoU3RydWN0dXJlQ2VsbEVkaXRBcmNoaXZlKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0cnVjdHVyZSgpOiB2b2lkIHtcblx0bmV3IERvbWFpbkluaXRpYWxpemVyKG5ldyBTdHJ1Y3R1cmVBcGlNb2R1bGUoKSwgbmV3IFN0cnVjdHVyZURvbWFpbk1vZHVsZSgpKS5pbml0KCk7XG59XG4iXX0=