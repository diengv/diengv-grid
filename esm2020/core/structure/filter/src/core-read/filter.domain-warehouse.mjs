import { FilterWarehouse } from '../api/filter.warehouse';
import { FilterEnabledArchive } from './config/filter-enabled.archive';
import { QuickFilterEnabledArchive } from './quick-filter/quick-filter-enabled.archive';
import { FilterTypeArchive } from './type/filter-type.archive';
import { UniqueValueCollectionArchive } from './unique/unique-value-collection.archive';
import { ActiveFilterArchive } from './active/active-filter.archive';
import { hermesMap, Optional, singleFromObservable } from '@generic-ui/hermes';
import { FilterDiContainer } from '../api/di/filter.di-container';
export class FilterDomainWarehouse extends FilterWarehouse {
    constructor(filterEnabledArchive, structureQuickFilterRepository, uniqueValuesArchive) {
        super();
        this.filterEnabledArchive = filterEnabledArchive;
        this.structureQuickFilterRepository = structureQuickFilterRepository;
        this.uniqueValuesArchive = uniqueValuesArchive;
        this.activeFilterArchive = FilterDiContainer.resolve(ActiveFilterArchive);
        this.filterTypeArchive = FilterDiContainer.resolve(FilterTypeArchive);
    }
    onFilteringEnabled(structureId) {
        return this.filterEnabledArchive.on(structureId);
    }
    onQuickFiltersEnabled(structureId) {
        return this.structureQuickFilterRepository.on(structureId);
    }
    onFilterTypes(structureId) {
        return this.filterTypeArchive.on(structureId);
    }
    onFilterTypesForFieldId(fieldId, structureId) {
        return this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            return map.getFilterTypes(fieldId);
        }));
    }
    onActiveFilters(structureId) {
        return this.activeFilterArchive.on(structureId);
    }
    findFilters(structureId) {
        return this.activeFilterArchive.find(structureId);
    }
    onUniqueValues(structureId) {
        return this.uniqueValuesArchive.on(structureId);
    }
    onceFilterTypeId(fieldId, filterTypeName, structureId) {
        return singleFromObservable(this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            const filterTypes = map.getFilterTypes(fieldId);
            const filterType = filterTypes.find((fieldType) => fieldType.getName() === filterTypeName);
            if (filterType === undefined) {
                return Optional.empty();
            }
            else {
                return Optional.of(filterType.getId());
            }
        })));
    }
}
FilterDomainWarehouse.services = [FilterEnabledArchive, QuickFilterEnabledArchive, UniqueValueCollectionArchive];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRvbWFpbi13YXJlaG91c2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvY29yZS1yZWFkL2ZpbHRlci5kb21haW4td2FyZWhvdXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUN4RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN4RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVyRSxPQUFPLEVBQUUsU0FBUyxFQUFrQyxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQU8vRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUdsRSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsZUFBZTtJQU16RCxZQUE2QixvQkFBMEMsRUFDbkQsOEJBQXlELEVBQ3pELG1CQUFpRDtRQUNwRSxLQUFLLEVBQUUsQ0FBQztRQUhvQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQ25ELG1DQUE4QixHQUE5Qiw4QkFBOEIsQ0FBMkI7UUFDekQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUE4QjtRQU5wRCx3QkFBbUIsR0FBd0IsaUJBQWlCLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFMUYsc0JBQWlCLEdBQXNCLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBTXJHLENBQUM7SUFJRCxrQkFBa0IsQ0FBQyxXQUF3QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELHFCQUFxQixDQUFDLFdBQXdCO1FBQzdDLE9BQU8sSUFBSSxDQUFDLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsYUFBYSxDQUFDLFdBQXdCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsdUJBQXVCLENBQUMsT0FBZ0IsRUFBRSxXQUF3QjtRQUNqRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ2hDLElBQUksQ0FDSixTQUFTLENBQUMsQ0FBQyxHQUE4QixFQUFFLEVBQUU7WUFDNUMsT0FBTyxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUNGLENBQUM7SUFDUixDQUFDO0lBRUQsZUFBZSxDQUFDLFdBQXdCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsV0FBVyxDQUFDLFdBQXdCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsY0FBYyxDQUFDLFdBQXdCO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsT0FBZ0IsRUFBRSxjQUFzQixFQUFFLFdBQXdCO1FBQ2xGLE9BQU8sb0JBQW9CLENBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQzdCLElBQUksQ0FDSixTQUFTLENBQUMsQ0FBQyxHQUE4QixFQUFFLEVBQUU7WUFDNUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVoRCxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEtBQUssY0FBYyxDQUFDLENBQUM7WUFFM0YsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUM3QixPQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUN4QjtpQkFBTTtnQkFDTixPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDdkM7UUFDRixDQUFDLENBQUMsQ0FDRixDQUNGLENBQUM7SUFFSCxDQUFDOztBQXJEZSw4QkFBUSxHQUFHLENBQUMsb0JBQW9CLEVBQUUseUJBQXlCLEVBQUUsNEJBQTRCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbHRlcldhcmVob3VzZSB9IGZyb20gJy4uL2FwaS9maWx0ZXIud2FyZWhvdXNlJztcbmltcG9ydCB7IEZpbHRlckVuYWJsZWRBcmNoaXZlIH0gZnJvbSAnLi9jb25maWcvZmlsdGVyLWVuYWJsZWQuYXJjaGl2ZSc7XG5pbXBvcnQgeyBRdWlja0ZpbHRlckVuYWJsZWRBcmNoaXZlIH0gZnJvbSAnLi9xdWljay1maWx0ZXIvcXVpY2stZmlsdGVyLWVuYWJsZWQuYXJjaGl2ZSc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlQXJjaGl2ZSB9IGZyb20gJy4vdHlwZS9maWx0ZXItdHlwZS5hcmNoaXZlJztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlQ29sbGVjdGlvbkFyY2hpdmUgfSBmcm9tICcuL3VuaXF1ZS91bmlxdWUtdmFsdWUtY29sbGVjdGlvbi5hcmNoaXZlJztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlckFyY2hpdmUgfSBmcm9tICcuL2FjdGl2ZS9hY3RpdmUtZmlsdGVyLmFyY2hpdmUnO1xuaW1wb3J0IHsgU3RydWN0dXJlSWQgfSBmcm9tICcuLi8uLi8uLi9zdHJ1Y3R1cmUtY29yZS9zcmMvYXBpL2dsb2JhbC9zdHJ1Y3R1cmUuaWQnO1xuaW1wb3J0IHsgaGVybWVzTWFwLCBIZXJtZXNPYnNlcnZhYmxlLCBIZXJtZXNTaW5nbGUsIE9wdGlvbmFsLCBzaW5nbGVGcm9tT2JzZXJ2YWJsZSB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlQ29sbGVjdGlvbk1vZGVsIH0gZnJvbSAnLi4vYXBpL3R5cGUvZmlsdGVyLXR5cGUtY29sbGVjdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBBY3RpdmVGaWx0ZXJNb2RlbCB9IGZyb20gJy4uL2FwaS9hY3RpdmUvYWN0aXZlLWZpbHRlci5tb2RlbCc7XG5pbXBvcnQgeyBVbmlxdWVWYWx1ZUNvbGxlY3Rpb25Nb2RlbCB9IGZyb20gJy4uL2FwaS91bmlxdWUvdW5pcXVlLXZhbHVlLWNvbGxlY3Rpb24ubW9kZWwnO1xuaW1wb3J0IHsgRmllbGRJZCB9IGZyb20gJy4uLy4uLy4uL2ZpZWxkL3NyYy9kb21haW4vZmllbGQvZmllbGQuaWQnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZU1vZGVsIH0gZnJvbSAnLi4vYXBpL3R5cGUvZmlsdGVyLXR5cGUubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZUlkIH0gZnJvbSAnLi4vZG9tYWluL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgRmlsdGVyRGlDb250YWluZXIgfSBmcm9tICcuLi9hcGkvZGkvZmlsdGVyLmRpLWNvbnRhaW5lcic7XG5cblxuZXhwb3J0IGNsYXNzIEZpbHRlckRvbWFpbldhcmVob3VzZSBleHRlbmRzIEZpbHRlcldhcmVob3VzZSB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBhY3RpdmVGaWx0ZXJBcmNoaXZlOiBBY3RpdmVGaWx0ZXJBcmNoaXZlID0gRmlsdGVyRGlDb250YWluZXIucmVzb2x2ZShBY3RpdmVGaWx0ZXJBcmNoaXZlKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlclR5cGVBcmNoaXZlOiBGaWx0ZXJUeXBlQXJjaGl2ZSA9IEZpbHRlckRpQ29udGFpbmVyLnJlc29sdmUoRmlsdGVyVHlwZUFyY2hpdmUpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyRW5hYmxlZEFyY2hpdmU6IEZpbHRlckVuYWJsZWRBcmNoaXZlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IHN0cnVjdHVyZVF1aWNrRmlsdGVyUmVwb3NpdG9yeTogUXVpY2tGaWx0ZXJFbmFibGVkQXJjaGl2ZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSB1bmlxdWVWYWx1ZXNBcmNoaXZlOiBVbmlxdWVWYWx1ZUNvbGxlY3Rpb25BcmNoaXZlKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdHN0YXRpYyByZWFkb25seSBzZXJ2aWNlcyA9IFtGaWx0ZXJFbmFibGVkQXJjaGl2ZSwgUXVpY2tGaWx0ZXJFbmFibGVkQXJjaGl2ZSwgVW5pcXVlVmFsdWVDb2xsZWN0aW9uQXJjaGl2ZV07XG5cblx0b25GaWx0ZXJpbmdFbmFibGVkKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8Ym9vbGVhbj4ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlckVuYWJsZWRBcmNoaXZlLm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uUXVpY2tGaWx0ZXJzRW5hYmxlZChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5zdHJ1Y3R1cmVRdWlja0ZpbHRlclJlcG9zaXRvcnkub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25GaWx0ZXJUeXBlcyhzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPEZpbHRlclR5cGVDb2xsZWN0aW9uTW9kZWw+IHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJUeXBlQXJjaGl2ZS5vbihzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRvbkZpbHRlclR5cGVzRm9yRmllbGRJZChmaWVsZElkOiBGaWVsZElkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPFJlYWRvbmx5QXJyYXk8RmlsdGVyVHlwZU1vZGVsPj4ge1xuXHRcdHJldHVybiB0aGlzLm9uRmlsdGVyVHlwZXMoc3RydWN0dXJlSWQpXG5cdFx0XHRcdCAgIC5waXBlKFxuXHRcdFx0XHRcdCAgIGhlcm1lc01hcCgobWFwOiBGaWx0ZXJUeXBlQ29sbGVjdGlvbk1vZGVsKSA9PiB7XG5cdFx0XHRcdFx0XHQgICByZXR1cm4gbWFwLmdldEZpbHRlclR5cGVzKGZpZWxkSWQpO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRvbkFjdGl2ZUZpbHRlcnMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxSZWFkb25seUFycmF5PEFjdGl2ZUZpbHRlck1vZGVsPj4ge1xuXHRcdHJldHVybiB0aGlzLmFjdGl2ZUZpbHRlckFyY2hpdmUub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0ZmluZEZpbHRlcnMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogT3B0aW9uYWw8UmVhZG9ubHlBcnJheTxBY3RpdmVGaWx0ZXJNb2RlbD4+IHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmVGaWx0ZXJBcmNoaXZlLmZpbmQoc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25VbmlxdWVWYWx1ZXMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxVbmlxdWVWYWx1ZUNvbGxlY3Rpb25Nb2RlbD4ge1xuXHRcdHJldHVybiB0aGlzLnVuaXF1ZVZhbHVlc0FyY2hpdmUub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25jZUZpbHRlclR5cGVJZChmaWVsZElkOiBGaWVsZElkLCBmaWx0ZXJUeXBlTmFtZTogc3RyaW5nLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNTaW5nbGU8T3B0aW9uYWw8RmlsdGVyVHlwZUlkPj4ge1xuXHRcdHJldHVybiBzaW5nbGVGcm9tT2JzZXJ2YWJsZShcblx0XHRcdHRoaXMub25GaWx0ZXJUeXBlcyhzdHJ1Y3R1cmVJZClcblx0XHRcdFx0LnBpcGUoXG5cdFx0XHRcdFx0aGVybWVzTWFwKChtYXA6IEZpbHRlclR5cGVDb2xsZWN0aW9uTW9kZWwpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IGZpbHRlclR5cGVzID0gbWFwLmdldEZpbHRlclR5cGVzKGZpZWxkSWQpO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBmaWx0ZXJUeXBlID0gZmlsdGVyVHlwZXMuZmluZCgoZmllbGRUeXBlKSA9PiBmaWVsZFR5cGUuZ2V0TmFtZSgpID09PSBmaWx0ZXJUeXBlTmFtZSk7XG5cblx0XHRcdFx0XHRcdGlmIChmaWx0ZXJUeXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIE9wdGlvbmFsLmVtcHR5KCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gT3B0aW9uYWwub2YoZmlsdGVyVHlwZS5nZXRJZCgpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KVxuXHRcdFx0XHQpXG5cdFx0KTtcblxuXHR9XG5cbn1cbiJdfQ==