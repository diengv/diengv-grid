import { ActiveFiltersSetEvent } from '../../core/active-filters-set.event';
import { ActiveFilterArchive } from './active-filter.archive';
import { FilterDiContainer } from '../../api/di/filter.di-container';
export class ActiveFiltersSetEventHandler {
    constructor() {
        this.activeFilterRepository = FilterDiContainer.resolve(ActiveFilterArchive);
    }
    forEvent() {
        return ActiveFiltersSetEvent;
    }
    handle(activeFiltersSetEvent) {
        if (activeFiltersSetEvent.ofMessageType('ActiveFiltersSetEvent')) {
            const activeFilters = activeFiltersSetEvent.getFilters();
            this.activeFilterRepository.next(activeFiltersSetEvent.getAggregateId(), activeFilters);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWZpbHRlcnMtc2V0LmV2ZW50LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvY29yZS1yZWFkL2FjdGl2ZS9hY3RpdmUtZmlsdGVycy1zZXQuZXZlbnQtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUdyRSxNQUFNLE9BQU8sNEJBQTRCO0lBQXpDO1FBRWtCLDJCQUFzQixHQUF3QixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQWdCL0csQ0FBQztJQWRBLFFBQVE7UUFDUCxPQUFPLHFCQUFxQixDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQTRDO1FBRWxELElBQUkscUJBQXFCLENBQUMsYUFBYSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFFakUsTUFBTSxhQUFhLEdBQXFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRTNGLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDeEY7SUFDRixDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21haW5FdmVudEhhbmRsZXIsIERvbWFpbkV2ZW50VHlwZSB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cbmltcG9ydCB7IFN0cnVjdHVyZUlkIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3RydWN0dXJlLWNvcmUvc3JjL2FwaS9nbG9iYWwvc3RydWN0dXJlLmlkJztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlcnNTZXRFdmVudCB9IGZyb20gJy4uLy4uL2NvcmUvYWN0aXZlLWZpbHRlcnMtc2V0LmV2ZW50JztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlckFyY2hpdmUgfSBmcm9tICcuL2FjdGl2ZS1maWx0ZXIuYXJjaGl2ZSc7XG5pbXBvcnQgeyBBY3RpdmVGaWx0ZXJNb2RlbCB9IGZyb20gJy4uLy4uL2FwaS9hY3RpdmUvYWN0aXZlLWZpbHRlci5tb2RlbCc7XG5pbXBvcnQgeyBGaWx0ZXJEaUNvbnRhaW5lciB9IGZyb20gJy4uLy4uL2FwaS9kaS9maWx0ZXIuZGktY29udGFpbmVyJztcblxuXG5leHBvcnQgY2xhc3MgQWN0aXZlRmlsdGVyc1NldEV2ZW50SGFuZGxlciBpbXBsZW1lbnRzIERvbWFpbkV2ZW50SGFuZGxlcjxTdHJ1Y3R1cmVJZCwgQWN0aXZlRmlsdGVyc1NldEV2ZW50PiB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBhY3RpdmVGaWx0ZXJSZXBvc2l0b3J5OiBBY3RpdmVGaWx0ZXJBcmNoaXZlID0gRmlsdGVyRGlDb250YWluZXIucmVzb2x2ZShBY3RpdmVGaWx0ZXJBcmNoaXZlKTtcblxuXHRmb3JFdmVudCgpOiBEb21haW5FdmVudFR5cGU8QWN0aXZlRmlsdGVyc1NldEV2ZW50PiB7XG5cdFx0cmV0dXJuIEFjdGl2ZUZpbHRlcnNTZXRFdmVudDtcblx0fVxuXG5cdGhhbmRsZShhY3RpdmVGaWx0ZXJzU2V0RXZlbnQ6IEFjdGl2ZUZpbHRlcnNTZXRFdmVudCk6IHZvaWQge1xuXG5cdFx0aWYgKGFjdGl2ZUZpbHRlcnNTZXRFdmVudC5vZk1lc3NhZ2VUeXBlKCdBY3RpdmVGaWx0ZXJzU2V0RXZlbnQnKSkge1xuXG5cdFx0XHRjb25zdCBhY3RpdmVGaWx0ZXJzOiBSZWFkb25seUFycmF5PEFjdGl2ZUZpbHRlck1vZGVsPiA9IGFjdGl2ZUZpbHRlcnNTZXRFdmVudC5nZXRGaWx0ZXJzKCk7XG5cblx0XHRcdHRoaXMuYWN0aXZlRmlsdGVyUmVwb3NpdG9yeS5uZXh0KGFjdGl2ZUZpbHRlcnNTZXRFdmVudC5nZXRBZ2dyZWdhdGVJZCgpLCBhY3RpdmVGaWx0ZXJzKTtcblx0XHR9XG5cdH1cblxufVxuIl19