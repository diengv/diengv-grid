import { Filter } from './filter';
import { FilterSettings } from './filter.settings';
import { FilterTypeManager } from './type/filter-type.manager';
import { FilterIdGenerator } from '../core/filter.id-generator';
import { ActiveFilterModel } from '../api/active/active-filter.model';
export class FilterManager {
    constructor() {
        this.filterSettings = new FilterSettings();
        // string -> FilterId
        this.filters = new Map();
        this.activeFilters = [];
    }
    getSettings() {
        return this.filterSettings;
    }
    getAll() {
        return Array.from(this.filters)
            .map((arr) => arr[1]);
    }
    getAllActiveFilters(fields) {
        return this.activeFilters
            .map((af) => {
            return new ActiveFilterModel(af.getFilterId(), (fields.get(af.getFieldId().toString())).getName(), this.filterTypeManager.getFilterType(af.getFilterTypeId()).getName(), af.getFilterValue());
        });
    }
    getFilterTypes() {
        return this.filterTypeManager.getFieldIdsToFilterTypes();
    }
    assignFilterTypes(fields) {
        this.filterTypeManager = new FilterTypeManager(fields);
    }
    add(fieldId, filterTypeId, value) {
        const filter = new Filter(FilterIdGenerator.generateId(), fieldId, filterTypeId, value);
        this.activeFilters.push(filter);
    }
    filter(entities, fields) {
        let filteredEntities = Array.from(entities);
        for (const filter of this.activeFilters) {
            const filterTypeId = filter.getFilterTypeId(), filterType = this.getFilterType(filterTypeId), value = filter.getFilterValue();
            filteredEntities = filterType.filterMany(filteredEntities, fields.get(filter.getFieldId().toString()), value);
        }
        return filteredEntities;
    }
    removeAll() {
        this.activeFilters.length = 0;
    }
    remove(filterId) {
        this.activeFilters =
            this.activeFilters.filter((filter) => {
                return filter.getFilterId() !== filterId;
            });
    }
    getFilterType(filterTypeId) {
        return this.filterTypeManager.getFilterType(filterTypeId);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLm1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvZG9tYWluL2ZpbHRlci5tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSW5ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBSXRFLE1BQU0sT0FBTyxhQUFhO0lBV3pCO1FBVGlCLG1CQUFjLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUV2RCxxQkFBcUI7UUFDSixZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFFN0Msa0JBQWEsR0FBa0IsRUFBRSxDQUFDO0lBSzFDLENBQUM7SUFFRCxXQUFXO1FBQ1YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzVCLENBQUM7SUFFRCxNQUFNO1FBQ0wsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDM0IsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsbUJBQW1CLENBQUMsTUFBZ0M7UUFDbkQsT0FBTyxJQUFJLENBQUMsYUFBYTthQUNuQixHQUFHLENBQUMsQ0FBQyxFQUFVLEVBQUUsRUFBRTtZQUNuQixPQUFPLElBQUksaUJBQWlCLENBQzNCLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFDaEIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQ2xELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQ3BFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FDbkIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVELGNBQWM7UUFDYixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxNQUEwQjtRQUMzQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsR0FBRyxDQUFDLE9BQWdCLEVBQUUsWUFBMEIsRUFBRSxLQUFVO1FBRTNELE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUEyQixFQUFFLE1BQWdDO1FBRW5FLElBQUksZ0JBQWdCLEdBQXNCLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBRXhDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFDNUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQzdDLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7WUFFakMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlHO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQztJQUN6QixDQUFDO0lBRUQsU0FBUztRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQWtCO1FBRXhCLElBQUksQ0FBQyxhQUFhO1lBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUU7Z0JBQzVDLE9BQU8sTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLFFBQVEsQ0FBQztZQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxhQUFhLENBQUMsWUFBMEI7UUFDL0MsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FHRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbHRlciB9IGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7IEl0ZW1FbnRpdHkgfSBmcm9tICcuLi8uLi8uLi9zb3VyY2Uvc3JjL2RvbWFpbi9pdGVtL2l0ZW0uZW50aXR5JztcbmltcG9ydCB7IEZpbHRlclNldHRpbmdzIH0gZnJvbSAnLi9maWx0ZXIuc2V0dGluZ3MnO1xuaW1wb3J0IHsgRmllbGRFbnRpdHkgfSBmcm9tICcuLi8uLi8uLi9maWVsZC9zcmMvZG9tYWluL2ZpZWxkL2ZpZWxkLmVudGl0eSc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlSWQgfSBmcm9tICcuL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgRmllbGRJZCB9IGZyb20gJy4uLy4uLy4uL2ZpZWxkL3NyYy9kb21haW4vZmllbGQvZmllbGQuaWQnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZU1hbmFnZXIgfSBmcm9tICcuL3R5cGUvZmlsdGVyLXR5cGUubWFuYWdlcic7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlTW9kZWwgfSBmcm9tICcuLi9hcGkvdHlwZS9maWx0ZXItdHlwZS5tb2RlbCc7XG5pbXBvcnQgeyBCYXNlRmlsdGVyVHlwZSB9IGZyb20gJy4vdHlwZS9iYXNlLWZpbHRlci10eXBlJztcbmltcG9ydCB7IEZpbHRlcklkR2VuZXJhdG9yIH0gZnJvbSAnLi4vY29yZS9maWx0ZXIuaWQtZ2VuZXJhdG9yJztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlck1vZGVsIH0gZnJvbSAnLi4vYXBpL2FjdGl2ZS9hY3RpdmUtZmlsdGVyLm1vZGVsJztcbmltcG9ydCB7IEZpbHRlcklkIH0gZnJvbSAnLi4vYXBpL2lkL2ZpbHRlci5pZCc7XG5cblxuZXhwb3J0IGNsYXNzIEZpbHRlck1hbmFnZXIge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyU2V0dGluZ3MgPSBuZXcgRmlsdGVyU2V0dGluZ3MoKTtcblxuXHQvLyBzdHJpbmcgLT4gRmlsdGVySWRcblx0cHJpdmF0ZSByZWFkb25seSBmaWx0ZXJzID0gbmV3IE1hcDxzdHJpbmcsIEZpbHRlcj4oKTtcblxuXHRwcml2YXRlIGFjdGl2ZUZpbHRlcnM6IEFycmF5PEZpbHRlcj4gPSBbXTtcblxuXHRwcml2YXRlIGZpbHRlclR5cGVNYW5hZ2VyOiBGaWx0ZXJUeXBlTWFuYWdlcjtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0fVxuXG5cdGdldFNldHRpbmdzKCk6IEZpbHRlclNldHRpbmdzIHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJTZXR0aW5ncztcblx0fVxuXG5cdGdldEFsbCgpOiBBcnJheTxGaWx0ZXI+IHtcblx0XHRyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmZpbHRlcnMpXG5cdFx0XHRcdFx0Lm1hcCgoYXJyKSA9PiBhcnJbMV0pO1xuXHR9XG5cblx0Z2V0QWxsQWN0aXZlRmlsdGVycyhmaWVsZHM6IE1hcDxzdHJpbmcsIEZpZWxkRW50aXR5Pik6IFJlYWRvbmx5QXJyYXk8QWN0aXZlRmlsdGVyTW9kZWw+IHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmVGaWx0ZXJzXG5cdFx0XHRcdCAgIC5tYXAoKGFmOiBGaWx0ZXIpID0+IHtcblx0XHRcdFx0XHQgICByZXR1cm4gbmV3IEFjdGl2ZUZpbHRlck1vZGVsKFxuXHRcdFx0XHRcdFx0ICAgYWYuZ2V0RmlsdGVySWQoKSxcblx0XHRcdFx0XHRcdCAgIChmaWVsZHMuZ2V0KGFmLmdldEZpZWxkSWQoKS50b1N0cmluZygpKSkuZ2V0TmFtZSgpLFxuXHRcdFx0XHRcdFx0ICAgdGhpcy5maWx0ZXJUeXBlTWFuYWdlci5nZXRGaWx0ZXJUeXBlKGFmLmdldEZpbHRlclR5cGVJZCgpKS5nZXROYW1lKCksXG5cdFx0XHRcdFx0XHQgICBhZi5nZXRGaWx0ZXJWYWx1ZSgpXG5cdFx0XHRcdFx0ICAgKTtcblx0XHRcdFx0ICAgfSk7XG5cdH1cblxuXHRnZXRGaWx0ZXJUeXBlcygpOiBNYXA8c3RyaW5nLCBBcnJheTxGaWx0ZXJUeXBlTW9kZWw+PiB7XG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyVHlwZU1hbmFnZXIuZ2V0RmllbGRJZHNUb0ZpbHRlclR5cGVzKCk7XG5cdH1cblxuXHRhc3NpZ25GaWx0ZXJUeXBlcyhmaWVsZHM6IEFycmF5PEZpZWxkRW50aXR5Pikge1xuXHRcdHRoaXMuZmlsdGVyVHlwZU1hbmFnZXIgPSBuZXcgRmlsdGVyVHlwZU1hbmFnZXIoZmllbGRzKTtcblx0fVxuXG5cdGFkZChmaWVsZElkOiBGaWVsZElkLCBmaWx0ZXJUeXBlSWQ6IEZpbHRlclR5cGVJZCwgdmFsdWU6IGFueSk6IHZvaWQge1xuXG5cdFx0Y29uc3QgZmlsdGVyID0gbmV3IEZpbHRlcihGaWx0ZXJJZEdlbmVyYXRvci5nZW5lcmF0ZUlkKCksIGZpZWxkSWQsIGZpbHRlclR5cGVJZCwgdmFsdWUpO1xuXG5cdFx0dGhpcy5hY3RpdmVGaWx0ZXJzLnB1c2goZmlsdGVyKTtcblx0fVxuXG5cdGZpbHRlcihlbnRpdGllczogQXJyYXk8SXRlbUVudGl0eT4sIGZpZWxkczogTWFwPHN0cmluZywgRmllbGRFbnRpdHk+KTogQXJyYXk8SXRlbUVudGl0eT4ge1xuXG5cdFx0bGV0IGZpbHRlcmVkRW50aXRpZXM6IEFycmF5PEl0ZW1FbnRpdHk+ID0gQXJyYXkuZnJvbShlbnRpdGllcyk7XG5cblx0XHRmb3IgKGNvbnN0IGZpbHRlciBvZiB0aGlzLmFjdGl2ZUZpbHRlcnMpIHtcblxuXHRcdFx0Y29uc3QgZmlsdGVyVHlwZUlkID0gZmlsdGVyLmdldEZpbHRlclR5cGVJZCgpLFxuXHRcdFx0XHRmaWx0ZXJUeXBlID0gdGhpcy5nZXRGaWx0ZXJUeXBlKGZpbHRlclR5cGVJZCksXG5cdFx0XHRcdHZhbHVlID0gZmlsdGVyLmdldEZpbHRlclZhbHVlKCk7XG5cblx0XHRcdGZpbHRlcmVkRW50aXRpZXMgPSBmaWx0ZXJUeXBlLmZpbHRlck1hbnkoZmlsdGVyZWRFbnRpdGllcywgZmllbGRzLmdldChmaWx0ZXIuZ2V0RmllbGRJZCgpLnRvU3RyaW5nKCkpLCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpbHRlcmVkRW50aXRpZXM7XG5cdH1cblxuXHRyZW1vdmVBbGwoKTogdm9pZCB7XG5cdFx0dGhpcy5hY3RpdmVGaWx0ZXJzLmxlbmd0aCA9IDA7XG5cdH1cblxuXHRyZW1vdmUoZmlsdGVySWQ6IEZpbHRlcklkKTogdm9pZCB7XG5cblx0XHR0aGlzLmFjdGl2ZUZpbHRlcnMgPVxuXHRcdFx0dGhpcy5hY3RpdmVGaWx0ZXJzLmZpbHRlcigoZmlsdGVyOiBGaWx0ZXIpID0+IHtcblx0XHRcdFx0cmV0dXJuIGZpbHRlci5nZXRGaWx0ZXJJZCgpICE9PSBmaWx0ZXJJZDtcblx0XHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRGaWx0ZXJUeXBlKGZpbHRlclR5cGVJZDogRmlsdGVyVHlwZUlkKTogQmFzZUZpbHRlclR5cGU8YW55PiB7XG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyVHlwZU1hbmFnZXIuZ2V0RmlsdGVyVHlwZShmaWx0ZXJUeXBlSWQpO1xuXHR9XG5cblxufVxuIl19