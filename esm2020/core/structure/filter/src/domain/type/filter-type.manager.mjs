import { DataType } from '../../../../field/src/domain/field/data/data-type';
import { ContainsFilterType } from './filter-types/contains-filter-type';
import { FilterTypeIdGenerator } from './filter-type.id-generator';
import { FilterTypeModel } from '../../api/type/filter-type.model';
export class FilterTypeManager {
    constructor(fields) {
        this.fieldIds = [];
        this.map = new WeakMap();
        this.filterTypeMap = new WeakMap();
        this.dataTypeToFilterType = new Map();
        this.filterTypeIdGenerator = new FilterTypeIdGenerator();
        this.assignFilterTypes();
        this.addFields(fields);
    }
    getFilterType(filterTypeId) {
        return this.filterTypeMap.get(filterTypeId);
    }
    getFieldIdsToFilterTypes() {
        const map = new Map();
        for (const fieldId of this.fieldIds) {
            const filterTypes = this.map.get(fieldId), readModels = filterTypes.map(f => {
                return new FilterTypeModel(f.getId(), f.getName());
            });
            map.set(fieldId.toString(), readModels);
        }
        return map;
    }
    addFields(fields) {
        for (const field of fields) {
            this.addField(field);
        }
    }
    addField(field) {
        const fieldId = field.getId(), dataType = field.getDataType();
        const filterTypesFromDataType = this.dataTypeToFilterType.get(dataType);
        this.fieldIds.push(fieldId);
        this.map.set(fieldId, Array.from(filterTypesFromDataType));
    }
    assignFilterTypes() {
        this.assignFilterTypesForDataTypeUnknown();
        this.assignFilterTypesForDataTypeNumber();
        this.assignFilterTypesForDataTypeString();
        this.assignFilterTypesForDataTypeBoolean();
        this.assignFilterTypesForDataTypeDate();
        this.assignFilterTypesForDataTypeCustom();
    }
    assignFilterTypesForDataTypeUnknown() {
        this.dataTypeToFilterType.set(DataType.UNKNOWN, []);
    }
    assignFilterTypesForDataTypeNumber() {
        this.dataTypeToFilterType.set(DataType.NUMBER, []);
    }
    assignFilterTypesForDataTypeString() {
        const filterTypes = [
            new ContainsFilterType(this.generateId())
        ];
        this.dataTypeToFilterType.set(DataType.STRING, filterTypes);
        this.addFilterTypes(filterTypes);
    }
    assignFilterTypesForDataTypeBoolean() {
        this.dataTypeToFilterType.set(DataType.BOOLEAN, []);
    }
    assignFilterTypesForDataTypeDate() {
        this.dataTypeToFilterType.set(DataType.DATE, []);
    }
    assignFilterTypesForDataTypeCustom() {
        this.dataTypeToFilterType.set(DataType.CUSTOM, []);
    }
    generateId() {
        return this.filterTypeIdGenerator.generate();
    }
    addFilterTypes(filterTypes) {
        for (const filterType of filterTypes) {
            this.filterTypeMap.set(filterType.getId(), filterType);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,