import { ColumnAutoConfigurator } from '../../../api/column/auto/column-auto.configurator';
import { DataType } from '../../../../../structure/field/src/domain/field/data/data-type';
export class DomainColumnAutoConfigurator extends ColumnAutoConfigurator {
    configure(source) {
        if (source !== undefined && source !== null && Array.isArray(source) && source.length === 0) {
            return [];
        }
        const rawItem = source[0];
        return Object.keys(rawItem)
            .map((key, index) => {
            return this.toColumnConfig(key, rawItem);
        });
    }
    toColumnConfig(key, rawItem) {
        return {
            field: this.getField(key),
            header: this.getHeader(key),
            type: this.getType(key, rawItem)
        };
    }
    getField(key) {
        return key;
    }
    getHeader(key) {
        return key[0].toUpperCase() + key.slice(1);
    }
    getType(key, rawItem) {
        if (typeof rawItem[key] === 'string') {
            return DataType.STRING;
        }
        else if (typeof rawItem[key] === 'number') {
            return DataType.NUMBER;
        }
        else if (rawItem[key] instanceof Date) {
            return DataType.DATE;
        }
        else if (typeof rawItem[key] === 'boolean') {
            return DataType.BOOLEAN;
        }
        else {
            return DataType.UNKNOWN;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLmNvbHVtbi1hdXRvLmNvbmZpZ3VyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtZ3JpZC9zcmMvY29yZS9jb21wb3NpdGlvbi9zcmMvZG9tYWluL2NvbHVtbi9hdXRvL2RvbWFpbi5jb2x1bW4tYXV0by5jb25maWd1cmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFFM0YsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdFQUFnRSxDQUFDO0FBRzFGLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxzQkFBc0I7SUFFdkUsU0FBUyxDQUFDLE1BQTBCO1FBRW5DLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDNUYsT0FBTyxFQUFFLENBQUM7U0FDVjtRQUVELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUxQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ3RCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUVuQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUVPLGNBQWMsQ0FBQyxHQUFXLEVBQUUsT0FBWTtRQUMvQyxPQUFPO1lBQ04sS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3pCLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztZQUMzQixJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDO1NBQ2hCLENBQUM7SUFDbkIsQ0FBQztJQUVPLFFBQVEsQ0FBQyxHQUFXO1FBQzNCLE9BQU8sR0FBRyxDQUFDO0lBQ1osQ0FBQztJQUVPLFNBQVMsQ0FBQyxHQUFXO1FBQzVCLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLE9BQU8sQ0FBQyxHQUFXLEVBQUUsT0FBWTtRQUV4QyxJQUFJLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUNyQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7U0FDdkI7YUFBTSxJQUFJLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUM1QyxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7U0FDdkI7YUFBTSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLEVBQUU7WUFDeEMsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO1NBQ3JCO2FBQU0sSUFBSSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDN0MsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQ3hCO2FBQU07WUFDTixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FDeEI7SUFDRixDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW5BdXRvQ29uZmlndXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2NvbHVtbi9hdXRvL2NvbHVtbi1hdXRvLmNvbmZpZ3VyYXRvcic7XG5pbXBvcnQgeyBDb2x1bW5Db25maWcsIE11bHRpQ29sdW1uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2NvbHVtbi9jb2x1bW4uY29uZmlnJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3RydWN0dXJlL2ZpZWxkL3NyYy9kb21haW4vZmllbGQvZGF0YS9kYXRhLXR5cGUnO1xuXG5cbmV4cG9ydCBjbGFzcyBEb21haW5Db2x1bW5BdXRvQ29uZmlndXJhdG9yIGV4dGVuZHMgQ29sdW1uQXV0b0NvbmZpZ3VyYXRvciB7XG5cblx0Y29uZmlndXJlKHNvdXJjZTogUmVhZG9ubHlBcnJheTxhbnk+KTogUmVhZG9ubHlBcnJheTxDb2x1bW5Db25maWcgfCBNdWx0aUNvbHVtbkNvbmZpZz4ge1xuXG5cdFx0aWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KHNvdXJjZSkgJiYgc291cmNlLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJhd0l0ZW0gPSBzb3VyY2VbMF07XG5cblx0XHRyZXR1cm4gT2JqZWN0LmtleXMocmF3SXRlbSlcblx0XHRcdFx0XHQgLm1hcCgoa2V5LCBpbmRleCkgPT4ge1xuXG5cdFx0XHRcdFx0XHQgcmV0dXJuIHRoaXMudG9Db2x1bW5Db25maWcoa2V5LCByYXdJdGVtKTtcblx0XHRcdFx0XHQgfSk7XG5cdH1cblxuXHRwcml2YXRlIHRvQ29sdW1uQ29uZmlnKGtleTogc3RyaW5nLCByYXdJdGVtOiBhbnkpOiBDb2x1bW5Db25maWcge1xuXHRcdHJldHVybiB7XG5cdFx0XHRmaWVsZDogdGhpcy5nZXRGaWVsZChrZXkpLFxuXHRcdFx0aGVhZGVyOiB0aGlzLmdldEhlYWRlcihrZXkpLFxuXHRcdFx0dHlwZTogdGhpcy5nZXRUeXBlKGtleSwgcmF3SXRlbSlcblx0XHR9IGFzIENvbHVtbkNvbmZpZztcblx0fVxuXG5cdHByaXZhdGUgZ2V0RmllbGQoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdHJldHVybiBrZXk7XG5cdH1cblxuXHRwcml2YXRlIGdldEhlYWRlcihrZXk6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRUeXBlKGtleTogc3RyaW5nLCByYXdJdGVtOiBhbnkpOiBEYXRhVHlwZSB7XG5cblx0XHRpZiAodHlwZW9mIHJhd0l0ZW1ba2V5XSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHJldHVybiBEYXRhVHlwZS5TVFJJTkc7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgcmF3SXRlbVtrZXldID09PSAnbnVtYmVyJykge1xuXHRcdFx0cmV0dXJuIERhdGFUeXBlLk5VTUJFUjtcblx0XHR9IGVsc2UgaWYgKHJhd0l0ZW1ba2V5XSBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdHJldHVybiBEYXRhVHlwZS5EQVRFO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHJhd0l0ZW1ba2V5XSA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRyZXR1cm4gRGF0YVR5cGUuQk9PTEVBTjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIERhdGFUeXBlLlVOS05PV047XG5cdFx0fVxuXHR9XG5cbn1cbiJdfQ==